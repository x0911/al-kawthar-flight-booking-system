# -*- coding: utf-8 -*-
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.database import initialize_database
from backend.user_service import UserService
from backend.flight_service import FlightService
from backend.booking_service import BookingService

initialize_database()

# 1Ô∏è‚É£ Log in or register user
user = UserService.login_user("hamdi", "mypassword")
if not user:
    UserService.register_user("hamdi", "mypassword", "hamdi@example.com")
    user = UserService.login_user("hamdi", "mypassword")

if user is None:
    raise Exception("‚ùå User login failed.")

# 2Ô∏è‚É£ Create a flight
FlightService.add_flight("AK102", "Cairo", "Paris", "2025-10-25", "14:00", 450.0, 30)
flights = FlightService.get_all_flights()
flight = flights[0]

# 3Ô∏è‚É£ Create a booking
booking = BookingService.create_booking(user["user_id"], flight["flight_id"], seat_count=2)
print("‚úÖ Booking created:", booking)

# 4Ô∏è‚É£ View user bookings
bookings_before = BookingService.get_user_bookings(user["user_id"])
print("üß≥ User bookings (before):", bookings_before)

# 5Ô∏è‚É£ Cancel the booking
if booking:
    success = BookingService.cancel_booking(booking["booking_id"])
    print("‚ùå Booking canceled successfully." if success else "‚ö†Ô∏è Cancellation failed.")

# 6Ô∏è‚É£ Verify cancellation
bookings_after = BookingService.get_user_bookings(user["user_id"])
print("üßæ User bookings (after):", bookings_after)

# 7Ô∏è‚É£ Check seat restoration
flight_after = FlightService.get_flight_by_id(flight["flight_id"])

if flight_after:
    print("‚úàÔ∏è Available seats after cancellation:", flight_after["available_seats"])
else:
    print("‚ö†Ô∏è Flight not found after cancellation.")

